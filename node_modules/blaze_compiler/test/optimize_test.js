var optimizer = require('../src/optimizer');

function testSimplify1(test) {
    var unoptimized = "true && (false && (true && false) && (true && false) && true)";
    var optimized = optimizer.simplify(unoptimized);
    console.log(optimized);

    test.notEqual(unoptimized, optimized);
    test.ok(optimized.length < unoptimized.length, "no improvement");
    test.done();
}
exports.testSimplify1 = testSimplify1;

function testSimplify2(test) {
    var unoptimized = "5 / (7 * 6)";
    var optimized = optimizer.simplify(unoptimized);
    test.equal(optimized, "5/(7*6)");
    test.done();
}
exports.testSimplify2 = testSimplify2;

function testSimplify3(test) {
    var unoptimized = "(5 / 6) * 7";
    var optimized = optimizer.simplify(unoptimized);
    test.equal(optimized, "5/6*7");
    test.done();
}
exports.testSimplify3 = testSimplify3;

function testSanitizeQuotes0(test) {
    var unoptimized = "a == ''";
    var optimized = optimizer.sanitizeQuotes(unoptimized);
    test.equal(optimized, "a == ''");
    test.done();
}
exports.testSanitizeQuotes0 = testSanitizeQuotes0;

function testSanitizeQuotes1(test) {
    var unoptimized = "a == \"\"";
    var optimized = optimizer.sanitizeQuotes(unoptimized);
    test.equal(optimized, "a == ''");
    test.done();
}
exports.testSanitizeQuotes1 = testSanitizeQuotes1;

function testSanitizeQuotes2(test) {
    var unoptimized = "a == \"'\"";
    var optimized = optimizer.sanitizeQuotes(unoptimized);
    test.equal(optimized, "a == '\\''");
    test.done();
}
exports.testSanitizeQuotes2 = testSanitizeQuotes2;

function testSanitizeQuotes3(test) {
    var unoptimized = 'a == "\\""';
    var optimized = optimizer.sanitizeQuotes(unoptimized);

    test.equal(optimized, "a == '\"'");
    test.done();
}
exports.testSanitizeQuotes3 = testSanitizeQuotes3;

function testSanitizeQuotes4(test) {
    var unoptimized = 'a == "" || b == \'\'';
    var optimized = optimizer.sanitizeQuotes(unoptimized);
    test.equal(optimized, "a == '' || b == ''");
    test.done();
}
exports.testSanitizeQuotes4 = testSanitizeQuotes4;

function testSanitizeQuotes5(test) {
    var unoptimized = 'a == "\'\'"';
    var optimized = optimizer.sanitizeQuotes(unoptimized);
    test.equal(optimized, "a == '\\'\\''");
    test.done();
}
exports.testSanitizeQuotes5 = testSanitizeQuotes5;

function testEscapeQuotes1(test) {
    test.equal(optimizer.escapeSingleQuotes("'"), "\\'");
    test.done();
}
exports.testEscapeQuotes1 = testEscapeQuotes1;

function testEscapeQuotes2(test) {
    test.equal(optimizer.escapeSingleQuotes("''"), "\\'\\'");
    test.done();
}
exports.testEscapeQuotes2 = testEscapeQuotes2;

function testEscapeEscapes1(test) {
    var unoptimized = '/\\d/';
    var optimized = optimizer.escapeEscapes(unoptimized);
    test.equal(optimized, "/\\\\d/");
    test.done();
}
exports.testEscapeEscapes1 = testEscapeEscapes1;

function testPrune(test) {
    test.equal(optimizer.pruneBooleanLiterals("!true"), "false");
    test.equal(optimizer.pruneBooleanLiterals("!false"), "true");

    test.equal(optimizer.pruneBooleanLiterals("true && true"), "true");
    test.equal(optimizer.pruneBooleanLiterals("true && false"), "false");
    test.equal(optimizer.pruneBooleanLiterals("false && true"), "false");
    test.equal(optimizer.pruneBooleanLiterals("false && false"), "false");

    test.equal(optimizer.pruneBooleanLiterals("true && f"), "(f)");
    test.equal(optimizer.pruneBooleanLiterals("f && true"), "(f)");
    test.equal(optimizer.pruneBooleanLiterals("false && f"), "false");
    test.equal(optimizer.pruneBooleanLiterals("f && false"), "false");

    test.equal(optimizer.pruneBooleanLiterals("true || f"), "true");
    test.equal(optimizer.pruneBooleanLiterals("f || true"), "true");
    test.equal(optimizer.pruneBooleanLiterals("false || f"), "(f)");
    test.equal(optimizer.pruneBooleanLiterals("f || false"), "(f)");

    test.done();
}
exports.testPrune = testPrune;

function testChildParentAnnihilation(test) {
    test.equal(optimizer.childParentAnnihilation("data.child('x').parent().val()"), "data.val()");

    test.done();
}
exports.testChildParentAnnihilation = testChildParentAnnihilation;

function testClauseRepetitionElimination(test) {
    test.equal(optimizer.clauseRepetitionElimination("a && a"), "((a))");
    test.equal(optimizer.clauseRepetitionElimination("a || a"), "((a))");
    test.equal(optimizer.clauseRepetitionElimination("a && b && a"), "(a&&b)");
    test.equal(optimizer.clauseRepetitionElimination("a && b && b && a && c && a"), "(a&&b&&c)");
    test.equal(optimizer.clauseRepetitionElimination("d && b && b && a && c && a"), "(d&&b&&a&&c)");
    test.equal(optimizer.clauseRepetitionElimination("d || b || b || a || c || a"), "(d||b||a||c)");

    test.done();
}
exports.testClauseRepetitionElimination = testClauseRepetitionElimination;
//# sourceMappingURL=optimize_test.js.map
