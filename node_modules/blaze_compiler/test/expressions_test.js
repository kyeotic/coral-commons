var expressions = require('../src/expression');
var Json = require('source-processor');

function translationTestCase(from, to, functions, test) {
    var expr = expressions.Expression.parse(from);

    var symbols = new expressions.Symbols();
    symbols.functions = functions;
    var translation = expr.generate(symbols);

    test.equal(translation, to);
}

function testArrayLookup1(test) {
    translationTestCase("next['c1'].val()", "newData.child('c1').val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup1 = testArrayLookup1;

function testArrayLookup2(test) {
    translationTestCase("next.c1.val()", "newData.child('c1').val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup2 = testArrayLookup2;

function testArrayLookup3(test) {
    translationTestCase("next[prev.val()].val()", "newData.child(data.val()).val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup3 = testArrayLookup3;

function testArrayLookup4(test) {
    translationTestCase("next[prev].val()", "newData.child(data.val()).val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup4 = testArrayLookup4;

function testArrayLookup5(test) {
    translationTestCase("next[prev.child].val()", "newData.child(data.child('child').val()).val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup5 = testArrayLookup5;

function testArrayLookup6(test) {
    translationTestCase("next[prev[child]].val()", "newData.child(data.child('child').val()).val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup6 = testArrayLookup6;

function testArrayLookup7(test) {
    translationTestCase("next[prev[child]]['fred'].val()", "newData.child(data.child('child').val()).child('fred').val()", new expressions.Functions(), test);
    test.done();
}
exports.testArrayLookup7 = testArrayLookup7;

function testParent1(test) {
    translationTestCase("next.parent()", "newData.parent()", new expressions.Functions(), test);
    test.done();
}
exports.testParent1 = testParent1;

function testParent2(test) {
    translationTestCase("next[prev.parent().val()]['blah'].c1.val()", "newData.child(data.parent().val()).child('blah').child('c1').val()", new expressions.Functions(), test);
    test.done();
}
exports.testParent2 = testParent2;

function testHasChildren(test) {
    translationTestCase("next.c1.hasChildren(['eric'])", "newData.child('c1').hasChildren(['eric'])", new expressions.Functions(), test);
    test.done();
}
exports.testHasChildren = testHasChildren;

function testContains1(test) {
    translationTestCase("next.c1.val().contains('yo')", "newData.child('c1').val().contains('yo')", new expressions.Functions(), test);
    test.done();
}
exports.testContains1 = testContains1;

function testContains2(test) {
    translationTestCase("'yo'.contains('yo')", "'yo'.contains('yo')", new expressions.Functions(), test);
    test.done();
}
exports.testContains2 = testContains2;

function testContains3(test) {
    translationTestCase("'yo'.contains(prev.val())", "'yo'.contains(data.val())", new expressions.Functions(), test);
    test.done();
}
exports.testContains3 = testContains3;

function testAuth1(test) {
    translationTestCase("auth.id", "auth.id", new expressions.Functions(), test);
    test.done();
}
exports.testAuth1 = testAuth1;

function testAuth2(test) {
    translationTestCase("root.users[auth.id]", "root.child('users').child(auth.id)", new expressions.Functions(), test);
    test.done();
}
exports.testAuth2 = testAuth2;

function testCoercion1(test) {
    translationTestCase("root.superuser == auth.id", "root.child('superuser').val()==auth.id", new expressions.Functions(), test);
    test.done();
}
exports.testCoercion1 = testCoercion1;

function testCoercion2(test) {
    translationTestCase("auth.id == root[next]", "auth.id==root.child(newData.val()).val()", new expressions.Functions(), test);
    test.done();
}
exports.testCoercion2 = testCoercion2;

function test$var1(test) {
    translationTestCase("auth.id == $userid", "auth.id==$userid", new expressions.Functions(), test);
    test.done();
}
exports.test$var1 = test$var1;

function test$var3(test) {
    translationTestCase("prev[$userid].val()", "data.child($userid).val()", new expressions.Functions(), test);
    test.done();
}
exports.test$var3 = test$var3;

function test$var4(test) {
    translationTestCase("prev.$userid.val()", "data.child($userid).val()", new expressions.Functions(), test);
    test.done();
}
exports.test$var4 = test$var4;

function testNow(test) {
    translationTestCase("next < now", "newData.val()<now", new expressions.Functions(), test);
    test.done();
}
exports.testNow = testNow;

function testRoot(test) {
    translationTestCase("root.users[auth.id].active == true", "root.child('users').child(auth.id).child('active').val()==true", new expressions.Functions(), test);
    test.done();
}
exports.testRoot = testRoot;

function testHasChild(test) {
    translationTestCase("next.hasChild('name')", "newData.hasChild('name')", new expressions.Functions(), test);
    test.done();
}
exports.testHasChild = testHasChild;

function testHasChildren1(test) {
    translationTestCase("next.hasChildren()", "newData.hasChildren()", new expressions.Functions(), test);
    test.done();
}
exports.testHasChildren1 = testHasChildren1;

function testHasChildren2(test) {
    translationTestCase("next.hasChildren(['name', 'age'])", "newData.hasChildren(['name', 'age'])", new expressions.Functions(), test);
    test.done();
}
exports.testHasChildren2 = testHasChildren2;

function testGetPriority(test) {
    translationTestCase("next.getPriority() != null", "newData.getPriority()!=null", new expressions.Functions(), test);
    test.done();
}
exports.testGetPriority = testGetPriority;

function testLength(test) {
    translationTestCase("next.isString()&&next.val().length>=10", "newData.isString()&&newData.val().length>=10", new expressions.Functions(), test);
    test.done();
}
exports.testLength = testLength;

function testBeginsWith(test) {
    translationTestCase("auth.identifier.beginsWith('internal-')", "auth.identifier.beginsWith('internal-')", new expressions.Functions(), test);
    test.done();
}
exports.testBeginsWith = testBeginsWith;

function testEndsWith(test) {
    translationTestCase("next.val().endsWith('internal-')", "newData.val().endsWith('internal-')", new expressions.Functions(), test);
    test.done();
}
exports.testEndsWith = testEndsWith;

function testReplace(test) {
    translationTestCase("root.users[auth.email.replace('.', ',')].exists()", "root.child('users').child(auth.email.replace('.', ',')).exists()", new expressions.Functions(), test);
    test.done();
}
exports.testReplace = testReplace;

function testToLowerCase(test) {
    translationTestCase("root.users[auth.identifier.toLowerCase()].exists()", "root.child('users').child(auth.identifier.toLowerCase()).exists()", new expressions.Functions(), test);
    test.done();
}
exports.testToLowerCase = testToLowerCase;

function testToUpperCase(test) {
    translationTestCase("root.users[auth.identifier.toUpperCase()].exists()", "root.child('users').child(auth.identifier.toUpperCase()).exists()", new expressions.Functions(), test);
    test.done();
}
exports.testToUpperCase = testToUpperCase;

function testRegex1(test) {
    translationTestCase("/regex/", "/regex/", new expressions.Functions(), test);
    test.done();
}
exports.testRegex1 = testRegex1;

function testRegex2(test) {
    translationTestCase("/\\d/", "/\\d/", new expressions.Functions(), test);
    test.done();
}
exports.testRegex2 = testRegex2;

function testRegex3(test) {
    translationTestCase("/\\\\d/", "/\\\\d/", new expressions.Functions(), test);
    test.done();
}
exports.testRegex3 = testRegex3;

function testRegex4(test) {
    translationTestCase("root.val().matches(/regex/)", "root.val().matches(/regex/)", new expressions.Functions(), test);
    test.done();
}
exports.testRegex4 = testRegex4;

function Function(dec, expr) {
    return new expressions.Function(dec, new Json.JString(expr, 0, 0));
}

function testFunctionParsing1(test) {
    var predicate = Function("f(x)", "true");

    test.ok(predicate.signature == "f(1)");
    test.done();
}
exports.testFunctionParsing1 = testFunctionParsing1;
function testFunctionParsing2(test) {
    var predicate = Function("f()", "true");

    test.ok(predicate.signature == "f(0)");
    test.done();
}
exports.testFunctionParsing2 = testFunctionParsing2;
function testFunctionParsing3(test) {
    var predicate = Function("f(x, y)", "true");
    test.equals(predicate.signature, "f(2)");
    test.deepEqual(predicate.parameter_map, ['x', 'y']);
    test.done();
}
exports.testFunctionParsing3 = testFunctionParsing3;

function testFunction1(test) {
    translationTestCase("isLoggedIn()", "(auth.id==null)", expressions.Functions.parse(Json.parse('[{"isLoggedIn()":"auth.id == null"}]')), test);
    test.done();
}
exports.testFunction1 = testFunction1;

function testFunction2(test) {
    translationTestCase("isEqual(prev, next.name)", "(data.val()==newData.child('name').val())", expressions.Functions.parse(Json.parse('[{"isEqual(a, b)":"a == b"}]')), test);
    test.done();
}
exports.testFunction2 = testFunction2;

function testFunction3(test) {
    translationTestCase("isLoggedIn(auth)", "(auth.id=='yo')", expressions.Functions.parse(Json.parse('[{"isLoggedIn(q)":"q.id == \'yo\'"}]')), test);
    test.done();
}
exports.testFunction3 = testFunction3;

function testUnary(test) {
    translationTestCase("!isLoggedIn(auth)", "!(auth.id=='yo')", expressions.Functions.parse(Json.parse('[{"isLoggedIn(q)":"q.id == \'yo\'"}]')), test);
    test.done();
}
exports.testUnary = testUnary;

function testSanitizeQuotes1(test) {
    translationTestCase("\"string\"=='string'", "\"string\"=='string'", new expressions.Functions(), test);
    test.done();
}
exports.testSanitizeQuotes1 = testSanitizeQuotes1;

function testSanitizeQuotes2(test) {
    translationTestCase("next['string'] == prev[\"string\"]", 'newData.child(\'string\').val()==data.child("string").val()', new expressions.Functions(), test);
    test.done();
}
exports.testSanitizeQuotes2 = testSanitizeQuotes2;

function testRewriteForChild(test) {
    var expr = expressions.Expression.parse("true");
    var rewrite = expr.rewriteForChild().toString();
    test.equals(rewrite, "true");
    var expr2 = expressions.Expression.parse(rewrite);
    var rewrite2 = expr2.rewriteForChild();
    test.equals(rewrite2, "true");
    test.done();
}
exports.testRewriteForChild = testRewriteForChild;
//# sourceMappingURL=expressions_test.js.map
