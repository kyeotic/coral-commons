var fs = require("fs");

var blaze = require('../src/blaze');
var compiler = require('../src/compiler');
var Json = require('source-processor');
var tv4 = require("tv4");

function testValidSchema(test) {
    var firebase_schema = blaze.load_yaml("schema/schema.yaml");
    var metaschema = fs.readFileSync("schema/jsonschema", { encoding: 'utf8' });

    var valid = tv4.validate(firebase_schema, metaschema, false, false);

    test.deepEqual(tv4.getMissingUris(), []);

    test.ok(valid);
    test.done();
}
exports.testValidSchema = testValidSchema;

function testStructureValidation(test) {
    var structure_example = blaze.load_yaml("examples/structure.yaml");
    test.ok(blaze.validate_rules(structure_example));
    test.done();
}
exports.testStructureValidation = testStructureValidation;

function testStructureParsing(test) {
    var structure_example = blaze.load_yaml("examples/structure.yaml");
    var rule = blaze.Rules.parse(structure_example.asObject());
    console.log(rule);
    test.ok(rule.schema != null);
    test.ok(rule.functions["isLoggedIn"] != null);
    test.done();
}
exports.testStructureParsing = testStructureParsing;

function testAntiCases(test) {
    var files = fs.readdirSync("test/anticases");

    for (var i in files) {
        if (!files.hasOwnProperty(i))
            continue;
        var path = "test/anticases/" + files[i];

        blaze.load_yaml_collection(path, function (anticase) {
            var failed = compiler.compileJSON(anticase) == null;
            if (!failed) {
                console.error("passed anticase:-");
                console.error(anticase.toJSON());
            }

            test.ok(failed);
        });
    }

    test.done();
}
exports.testAntiCases = testAntiCases;

function testMailValidation(test) {
    var mail_example = blaze.load_yaml("examples/mail_example.yaml");
    test.ok(blaze.validate_rules(mail_example));
    test.done();
}
exports.testMailValidation = testMailValidation;

function testRequiredArray(test) {
    var schema_yaml = "schema:\n" + "  type: object\n" + "  required: object\n";

    var schema = Json.parse_yaml(schema_yaml);

    try  {
        blaze.validate_rules(schema);
        test.ok(false);
    } catch (err) {
        test.ok(true);
    }

    test.ok(compiler.compileJSON(schema) == null);
    test.done();
}
exports.testRequiredArray = testRequiredArray;
//# sourceMappingURL=validation_test.js.map
