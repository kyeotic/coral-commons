require('source-map-support').install();
var schema = require('../src/schema');
var blaze = require('./blaze');

var globals = require('../src/globals');
var fs = require('fs');

function compileJSON(json) {
    try  {
        var ok = blaze.validate_rules(json);
        if (globals.debug) {
            console.log("\ninput:");
            console.log(JSON.stringify(json.toJSON()));
        }

        var model = blaze.Rules.parse(json.asObject());

        model.inflateSchema();

        schema.annotate(model);

        if (globals.debug) {
            console.log("\nannotated model:");
            console.log(model.schema.root);
        }

        schema.pushDownConstraints(model);
        if (globals.debug) {
            console.log("\npushed down constraint model:");
            console.log(model.schema.root);
        }

        schema.pullUpConstraints(model);
        if (globals.debug) {
            console.log("\npulled up constraint model:");
            console.log(model.schema.root);
        }

        schema.combineACL(model);
        if (globals.debug) {
            console.log("\n ACL and schema:");
            console.log(model.schema.root);
        }

        var code = schema.generateRules(model);

        if (globals.debug) {
            console.log("\ngenerated code:");
            console.log(code);
        }

        console.log("\nwriting rules.json");
        fs.writeFileSync("rules.json", code);
        model.code = code;
        return model;
    } catch (error) {
        var source = error.source;
        var msg = error.message;

        if (source) {
            console.error("error line " + source.start.row() + ":" + source.start.col());
            console.error(source.toJSON());
        }

        if (globals.debug)
            console.error(error.stack);
        else {
            console.error(msg);
            console.error("run with -v option for fuller error messages");
        }

        return null;
    }
}
exports.compileJSON = compileJSON;

function compile(path, debug) {
    if (typeof debug === "undefined") { debug = false; }
    globals.debug = debug;

    if (path.slice(path.length - 5) == ".json") {
        var json = blaze.load_json(path);
    } else {
        var json = blaze.load_yaml(path);
    }
    return exports.compileJSON(json);
}
exports.compile = compile;
//# sourceMappingURL=compiler.js.map
