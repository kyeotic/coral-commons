(function (Modifier) {
    Modifier[Modifier["public"] = 0] = "public";
    Modifier[Modifier["private"] = 1] = "private";
    Modifier[Modifier["protected"] = 2] = "protected";
    Modifier[Modifier["none"] = 3] = "none";
})(exports.Modifier || (exports.Modifier = {}));
var Modifier = exports.Modifier;
function writeStatement(statement, output, indent) {
    writeLine(statement + ";", output, indent);
}
exports.writeStatement = writeStatement;
function writeLine(statement, output, indent) {
    var prefix = Array(indent).join('\t');
    output.push(prefix + statement);
}
exports.writeLine = writeLine;
function write(statement, output, indent) {
    if (indent === void 0) { indent = 0; }
    var prefix = Array(indent).join('\t');
    output[output.length - 1] = output[output.length - 1] + (prefix + statement);
}
exports.write = write;
function modifierString(modifier) {
    if (modifier == 3 /* none */)
        return "";
    else
        return Modifier[modifier] + " ";
}
exports.modifierString = modifierString;
var JFile = (function () {
    function JFile() {
        this._imports = [];
        this._classes = [];
    }
    JFile.prototype.setPackage = function (_package) {
        this._package = _package;
        return this;
    };
    JFile.prototype.addImport = function (_import) {
        this._imports.push(_import);
        return this;
    };
    JFile.prototype.addClass = function (_class) {
        this._classes.push(_class);
        return this;
    };
    JFile.prototype.write = function (output, indent) {
        if (indent === void 0) { indent = 0; }
        writeStatement("package " + this._package, output, indent);
        this._imports.forEach(function (_import) {
            writeStatement("import " + _import, output, indent);
        });
        this._classes.forEach(function (_class) {
            _class.write(output, indent + 1);
        });
    };
    return JFile;
})();
exports.JFile = JFile;
var JClass = (function () {
    function JClass() {
        this._modifier = 3 /* none */;
        this._static = false;
        this._abstract = false;
        this._extends = [];
        this._implements = [];
        this._fields = [];
        this._methods = [];
        this._classes = [];
        this._isInterface = false;
    }
    JClass.prototype.setModifier = function (_modifier) {
        this._modifier = _modifier;
        return this;
    };
    JClass.prototype.setStatic = function (_static) {
        this._static = _static;
        return this;
    };
    JClass.prototype.setAbstract = function (_abstract) {
        this._abstract = _abstract;
        return this;
    };
    JClass.prototype.setName = function (_name) {
        this._name = _name;
        return this;
    };
    JClass.prototype.addExtends = function (_extends) {
        this._extends.push(_extends);
        return this;
    };
    JClass.prototype.addImplements = function (_implements) {
        this._implements.push(_implements);
        return this;
    };
    JClass.prototype.addField = function (_field) {
        this._fields.push(_field);
        return this;
    };
    JClass.prototype.addMethod = function (_method) {
        this._methods.push(_method);
        return this;
    };
    JClass.prototype.addClass = function (_class) {
        this._classes.push(_class);
        return this;
    };
    JClass.prototype.setInterface = function (_isInterface) {
        this._isInterface = _isInterface;
        return this;
    };
    JClass.prototype.containsMethod = function (name, params) {
        var found = false;
        this._methods.forEach(function (m) {
            if (m._name == name && arrayOfArraysEqual(m._params, params))
                found = true;
        });
        return found;
    };
    JClass.prototype.write = function (output, indent) {
        if (indent === void 0) { indent = 0; }
        writeLine(modifierString(this._modifier), output, indent);
        if (this._static)
            write("static ", output);
        if (this._abstract)
            write("abstract ", output);
        if (this._isInterface) {
            write("interface ", output);
        }
        else {
            write("class ", output);
        }
        write(this._name + " ", output);
        if (this._extends.length) {
            write("extends ", output);
            var extendClauses = [];
            this._extends.forEach(function (_extend) {
                extendClauses.push(_extend);
            });
            write(extendClauses.join(", "), output);
            write(" ", output);
        }
        if (this._implements.length) {
            write("implements ", output);
            var implementsClauses = [];
            this._implements.forEach(function (_implement) {
                implementsClauses.push(_implement);
            });
            write(implementsClauses.join(", "), output);
        }
        write(" {", output);
        this._fields.forEach(function (_field) {
            _field.write(output, indent + 1);
        });
        this._methods.forEach(function (_method) {
            _method.write(output, indent + 1);
        });
        this._classes.forEach(function (_class) {
            _class.write(output, indent + 1);
        });
        writeLine("}", output, indent);
    };
    return JClass;
})();
exports.JClass = JClass;
var JField = (function () {
    function JField() {
        this._modifier = 3 /* none */;
        this._static = false;
        this._final = false;
    }
    JField.prototype.setModifier = function (_modifier) {
        this._modifier = _modifier;
        return this;
    };
    JField.prototype.setStatic = function (_static) {
        this._static = _static;
        return this;
    };
    JField.prototype.setFinal = function (_final) {
        this._final = _final;
        return this;
    };
    JField.prototype.setName = function (_name) {
        this._name = _name;
        return this;
    };
    JField.prototype.setType = function (_type) {
        this._type = _type;
        return this;
    };
    JField.prototype.setInitializer = function (_initializer) {
        this._initializer = _initializer;
        return this;
    };
    JField.prototype.write = function (output, indent) {
        writeLine(modifierString(this._modifier), output, indent);
        if (this._static)
            write("static ", output);
        if (this._final)
            write("final ", output);
        write(this._type + " ", output);
        write(this._name + " ", output);
        if (this._initializer)
            write(" = " + this._initializer, output);
        write(";", output);
    };
    return JField;
})();
exports.JField = JField;
var JMethod = (function () {
    function JMethod() {
        this._modifier = 3 /* none */;
        this._static = false;
        this._abstract = false;
        this._body = null;
        this._params = []; //array of [dec, name] pairs
    }
    JMethod.prototype.setModifier = function (_modifier) {
        this._modifier = _modifier;
        return this;
    };
    JMethod.prototype.setStatic = function (_static) {
        this._static = _static;
        return this;
    };
    JMethod.prototype.setAbstract = function (_abstract) {
        this._abstract = _abstract;
        return this;
    };
    JMethod.prototype.setName = function (_name) {
        this._name = _name;
        return this;
    };
    JMethod.prototype.setType = function (_type) {
        this._type = _type;
        return this;
    };
    JMethod.prototype.setBody = function (_lines) {
        this._body = _lines;
        return this;
    };
    JMethod.prototype.addParam = function (_param) {
        this._params.push(_param);
        return this;
    };
    JMethod.prototype.write = function (output, indent) {
        writeLine(modifierString(this._modifier), output, indent);
        if (this._static)
            write("static ", output);
        if (this._abstract)
            write("abstract ", output);
        if (this._type)
            write(this._type + " ", output);
        write(this._name + "(", output);
        var paramDecs = [];
        this._params.forEach(function (_param) {
            paramDecs.push(_param[0] + " " + _param[1]);
        });
        write(paramDecs.join(", "), output);
        write(")", output);
        if (this._body) {
            write(" {", output);
            this._body.forEach(function (_line) {
                writeLine(_line, output, indent + 1);
            });
            writeLine("}", output, indent);
        }
        else {
            write(";", output);
        }
    };
    return JMethod;
})();
exports.JMethod = JMethod;
function arrayOfArraysEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; ++i) {
        if (!arraysEqual(a[i], b[i]))
            return false;
    }
    return true;
}
function arraysEqual(a, b) {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.length != b.length)
        return false;
    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
//# sourceMappingURL=javasource.js.map