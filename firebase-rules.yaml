functions:
  - isUser(userId): auth.uid !== null && auth.uid === userId
  - hasRole(roleName): root.users[auth.uid].role === roleName
  - isBoardMember(): hasRole('Board Member')
  - isAdmin(): hasRole('Admin')
  - isManager(): hasRole('Admin') || hasRole('Board Member')
  - isVerified(): root.users[auth.uid].role !== 'Unverified' && root.users[auth.uid].role.exists()
  - createOnly():      next.exists() && !prev.exists()
  - deleteOnly():      prev.exists() && !next.exists()
  - createOrDelete():  createOnly() || deleteOnly() || (next === prev)

schema:
  type: object
  properties:
    users:
      type: object
      $userId:
        type: object
        constraint: isUser($userId) || isManager()
        properties:
          role:
            type: string
            enum: [Admin, Board Member, Verified, Unverified]
            constraint: (isManager() && next !== 'Admin') || isAdmin()
          name: { type: string }
          residentId: { type: string, constraint: isManager() }
    houses:
     type: object
     $house:
      type: object
      constraint: isManager()
      properties:
        number: {type: string, constraint: createOrDelete()}
        garage: {type: string}
        residents: 
          type: object
          ~$resident: {type: boolean}
    residents:
      type: object
      $resident:
        type: object
        constraint: isManager() || isUser(root.residents.$resident.userId)
        properties:
          type: 
            type: string
            enum: [Owner, Renter, Board Member]
          fullName: {type: string}
          houseId: {type: string, constraint: isManager()}
          userId:  {type: string, constraint: isManager()}
          phones:
            type: object
            ~$phone: {type: string}
          emails:
            type: object
            ~$email: {type: string}
    bulletins:
      type: object
      $bulletin:
        type: object
        constraint: isVerified() && (isManager() || (prev.exists() && isUser(prev.userId)) || (isUser(next.userId) && createOnly()))
        properties:
          userId: { type: string, constraint: isUser(next) || deleteOnly()}
          title: {type: string }
          content: { type: string }
          date: { type: string }

access:
  - location: /
    read:  isVerified()
    write: true

  - location: users/$userId/
    read:    $userId === auth.uid
