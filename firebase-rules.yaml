functions:
  - isUser(user): auth.uid !== null && auth.uid === user
  - hasRole(roleName): root.users[auth.uid].role === roleName
  - isBoardMember(): hasRole('Board Member')
  - isAdmin(): hasRole('Admin')
  - isManager(): hasRole('Admin') || hasRole('Board Member')
  - isVerified(): root.users[auth.uid].role !== 'Unverified' && root.users[auth.uid].role.exists()

schema:
  type: object
  properties:
    users:
      type: object
      $userId:
        type: object
        constraint: isUser($userId) || isManager()
        properties:
          role:
            type: string
            enum: [Admin, Board Member, Verified, Unverified]
            constraint: isManager() && next !== 'Admin'
          name: { type: string }
          residentId: { type: string, constraint: isManager() }
    houses:
     type: object
     $house:
      type: object
      constraint: isManager()
      properties:
        house: {type: number}
        garage: {type: string}
        residents: 
          type: object
          $resident: {type: string}
    residents:
      type: object
      $resident:
        type: object
        constraint: isManager()
        properties:
          type: 
            type: string
            enum: [Owner, Renter]
          name: {type: string}
          houseId: {type: string}
          userId:  {type: string}
          phones:
            type: object
            $phone: {type: string}
          emails:
            type: object
            $email: {type: string}

access:
  - location: /
    read:  isVerified()
    write: true
